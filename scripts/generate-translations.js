#!/usr/bin/env node
/**
 * Generate organized translation files from extraction report
 */

const fs = require('fs');
const path = require('path');

// Russian translations mapping (common phrases)
const russianMap = {
  // Common actions
  '◊©◊û◊ï◊®': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
  '◊ë◊ô◊ò◊ï◊ú': '–û—Ç–º–µ–Ω–∞',
  '◊û◊ó◊ß': '–£–¥–∞–ª–∏—Ç—å',
  '◊¢◊®◊ï◊ö': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
  '◊î◊ï◊°◊£': '–î–æ–±–∞–≤–∏—Ç—å',
  '◊°◊í◊ï◊®': '–ó–∞–∫—Ä—ã—Ç—å',
  '◊ó◊ô◊§◊ï◊©': '–ü–æ–∏—Å–∫',
  '◊°◊ô◊†◊ï◊ü': '–§–∏–ª—å—Ç—Ä',
  '◊ó◊ñ◊ï◊®': '–ù–∞–∑–∞–¥',
  '◊©◊ú◊ó': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
  '◊ê◊ô◊©◊ï◊®': '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',

  // Common nouns
  '◊ê◊ô◊®◊ï◊¢◊ô◊ù': '–°–æ–±—ã—Ç–∏—è',
  '◊û◊©◊ô◊û◊ï◊™': '–ó–∞–¥–∞—á–∏',
  '◊ë◊¢◊ô◊ï◊™': '–ü—Ä–æ–±–ª–µ–º—ã',
  '◊§◊®◊ï◊ò◊ï◊ß◊ï◊ú◊ô◊ù': '–ü—Ä–æ—Ç–æ–∫–æ–ª—ã',
  '◊ï◊¢◊ì◊ï◊™': '–ö–æ–º–∏—Ç–µ—Ç—ã',
  '◊û◊©◊ï◊ë': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
  '◊î◊í◊ì◊®◊ï◊™': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
  '◊ì◊£ ◊î◊ë◊ô◊™': '–ì–ª–∞–≤–Ω–∞—è',
  '◊ú◊ï◊ó ◊©◊†◊î': '–ö–∞–ª–µ–Ω–¥–∞—Ä—å',
  '◊õ◊°◊§◊ô◊ù': '–§–∏–Ω–∞–Ω—Å—ã',

  // Status
  '◊î◊¶◊ú◊ó◊î': '–£—Å–ø–µ—Ö',
  '◊©◊í◊ô◊ê◊î': '–û—à–∏–±–∫–∞',
  '◊ê◊ñ◊î◊®◊î': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
  '◊ò◊ï◊¢◊ü': '–ó–∞–≥—Ä—É–∑–∫–∞',

  // Common phrases
  '◊ë◊î◊¶◊ú◊ó◊î': '—É—Å–ø–µ—à–Ω–æ',
  '◊†◊õ◊©◊ú': '–Ω–µ —É–¥–∞–ª–æ—Å—å',
  '◊ê◊ô◊ü': '–Ω–µ—Ç',
  '◊õ◊ü': '–¥–∞',
  '◊ú◊ê': '–Ω–µ—Ç',
};

function translateToRussian(hebrewText) {
  // Check direct mapping
  if (russianMap[hebrewText]) {
    return russianMap[hebrewText];
  }

  // Check if it contains mapped words
  for (const [he, ru] of Object.entries(russianMap)) {
    if (hebrewText.includes(he)) {
      return hebrewText.replace(new RegExp(he, 'g'), ru);
    }
  }

  // Return placeholder for manual translation
  return `[RU: ${hebrewText}]`;
}

function generateKey(text, context, category) {
  // Remove special characters
  let key = text
    .replace(/[^\u0590-\u05FFa-zA-Z0-9\s]/g, '')
    .trim();

  // Common patterns
  if (text.includes('◊©◊í◊ô◊ê◊î')) return `error_${Math.random().toString(36).substr(2, 6)}`;
  if (text.includes('◊ë◊î◊¶◊ú◊ó◊î')) return `success_${Math.random().toString(36).substr(2, 6)}`;
  if (text.startsWith('◊î◊ï◊°◊£') || text.startsWith('◊¶◊ï◊®')) return `add_${Math.random().toString(36).substr(2, 6)}`;
  if (text.startsWith('◊¢◊®◊ï◊ö')) return `edit_${Math.random().toString(36).substr(2, 6)}`;
  if (text.startsWith('◊û◊ó◊ß')) return `delete_${Math.random().toString(36).substr(2, 6)}`;

  // Generate from first few words
  const words = key.split(/\s+/).slice(0, 3);
  return words.join('_').substring(0, 40) + '_' + Math.random().toString(36).substr(2, 4);
}

function organizeTranslations(report) {
  const translations = {
    he: {},
    ru: {},
  };

  // Organize by category
  Object.entries(report.categories).forEach(([category, strings]) => {
    if (!translations.he[category]) {
      translations.he[category] = {};
      translations.ru[category] = {};
    }

    // Track seen texts to avoid duplicates
    const seen = new Set();

    strings.forEach(str => {
      // Skip duplicates within category
      if (seen.has(str.text)) return;
      seen.add(str.text);

      const key = generateKey(str.text, str.context, category);
      translations.he[category][key] = str.text;
      translations.ru[category][key] = translateToRussian(str.text);
    });
  });

  return translations;
}

function main() {
  console.log('üìù Generating translation files...\n');

  const reportPath = path.join(process.cwd(), 'translation-extraction-report.json');
  const report = JSON.parse(fs.readFileSync(reportPath, 'utf-8'));

  const translations = organizeTranslations(report);

  // Save Hebrew translations
  const heFile = path.join(process.cwd(), 'messages/he-full.json');
  fs.writeFileSync(heFile, JSON.stringify(translations.he, null, 2));
  console.log(`‚úÖ Hebrew translations: ${heFile}`);

  // Save Russian translations
  const ruFile = path.join(process.cwd(), 'messages/ru-full.json');
  fs.writeFileSync(ruFile, JSON.stringify(translations.ru, null, 2));
  console.log(`‚úÖ Russian translations: ${ruFile}`);

  // Count keys
  const heKeys = Object.values(translations.he).reduce((sum, cat) => sum + Object.keys(cat).length, 0);
  const ruKeys = Object.values(translations.ru).reduce((sum, cat) => sum + Object.keys(cat).length, 0);

  console.log(`\nüìä Generated ${heKeys} Hebrew keys`);
  console.log(`üìä Generated ${ruKeys} Russian keys`);

  // Count auto-translated vs placeholders
  const autoTranslated = Object.values(translations.ru)
    .flatMap(cat => Object.values(cat))
    .filter(val => !val.startsWith('[RU:')).length;

  console.log(`\n‚úÖ Auto-translated: ${autoTranslated} keys`);
  console.log(`‚ö†Ô∏è  Need manual translation: ${ruKeys - autoTranslated} keys`);
}

main();
