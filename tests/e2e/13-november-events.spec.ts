import { test, expect } from '@playwright/test'

test.describe('November 2025 Events', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('http://localhost:4500/he')
  })

  test('should display November 2025 events on homepage', async ({ page }) => {
    // Wait for the events section to load
    await page.waitForSelector('[data-testid="upcoming-events"], .events-section, h2:has-text("◊ê◊ô◊®◊ï◊¢◊ô◊ù ◊ß◊®◊ï◊ë◊ô◊ù")', {
      timeout: 10000
    })

    // Check if we have the events heading
    const eventsHeading = page.locator('h2:has-text("◊ê◊ô◊®◊ï◊¢◊ô◊ù ◊ß◊®◊ï◊ë◊ô◊ù")')
    await expect(eventsHeading).toBeVisible()

    // Check for November 2025 events - look for any of the event titles
    const eventTitles = [
      '◊©◊ô◊® ◊™◊ß◊ï◊ï◊î',
      '◊ô◊ï◊ù ◊î◊ñ◊ô◊õ◊®◊ï◊ü ◊ú◊ô◊¶◊ó◊ß ◊®◊ë◊ô◊ü',
      '◊§◊®◊ú◊û◊†◊ò ◊î◊ô◊ú◊ì◊ô◊ù',
      '◊û◊°◊¢ ◊†◊™◊†◊ô◊ô◊™◊ô',
      '◊ß◊ë◊ú◊™ ◊°◊§◊® ◊™◊ï◊®◊î',
      '◊ñ◊î ◊û◊™◊ó◊ô◊ú ◊ë◊¶◊¢◊ì',
      '◊î◊ì◊û◊ô◊ï◊ü ◊ï◊ê◊ï◊¶◊®◊ï◊™ ◊ò◊®◊ï◊û◊ï◊ú◊ï',
      '◊û◊°◊ô◊ë◊™ ◊°◊ô◊ï◊ù',
      '◊©◊ô◊® ◊ú◊ê◊î◊ë◊î',
      '◊û◊®◊õ◊ñ ◊û◊ê◊ô◊î',
      '◊ó◊í ◊î◊°◊ô◊í◊ì',
      '◊ë◊ó◊ô◊®◊ï◊™ ◊ú◊û◊ï◊¢◊¶◊™ ◊™◊ú◊û◊ô◊ì◊ô◊ù',
      '◊©◊ô◊® ◊î◊©◊ô◊ô◊®◊î',
      '◊ô◊ï◊ù ◊î◊ñ◊ô◊õ◊®◊ï◊ü ◊ú◊ì◊ï◊ì ◊ë◊ü ◊í◊ï◊®◊ô◊ï◊ü',
      '◊™◊ï◊ì◊î'
    ]

    // Check if at least some events are visible
    let foundEvents = 0
    for (const title of eventTitles) {
      const eventCard = page.locator(`text=${title}`).first()
      if (await eventCard.isVisible({ timeout: 1000 }).catch(() => false)) {
        foundEvents++
      }
    }

    console.log(`‚úÖ Found ${foundEvents} November 2025 events on the page`)
    expect(foundEvents).toBeGreaterThan(0)
  })

  test('should navigate to events page and display November events', async ({ page }) => {
    // Navigate to events page
    await page.click('a:has-text("◊ê◊ô◊®◊ï◊¢◊ô◊ù"), a[href*="/events"]')

    // Wait for events to load
    await page.waitForSelector('.event-card, [data-testid="event-item"]', {
      timeout: 10000
    })

    // Check for November events
    const novemberEvents = page.locator('text=/◊†◊ï◊ë◊û◊ë◊®|November|2025-11/')
    const count = await novemberEvents.count()

    console.log(`‚úÖ Found ${count} November events references`)
    expect(count).toBeGreaterThan(0)
  })

  test('should display event with emoji icons', async ({ page }) => {
    // Look for emojis in event titles
    const emojis = ['üéµ', 'üïØÔ∏è', 'üë•', 'üöå', 'üèÄ', 'üìñ', 'üé≠', 'üéâ', 'üåà', 'ü©∫', 'üåø', 'üó≥Ô∏è', 'üáÆüá±', 'üíâ']

    let foundEmojis = 0
    for (const emoji of emojis) {
      const emojiElement = page.locator(`text=${emoji}`).first()
      if (await emojiElement.isVisible({ timeout: 1000 }).catch(() => false)) {
        foundEmojis++
      }
    }

    console.log(`‚úÖ Found ${foundEmojis} emoji icons in events`)
    expect(foundEmojis).toBeGreaterThan(0)
  })

  test('should display bilingual event content', async ({ page }) => {
    // Check for Hebrew content
    const hebrewText = page.locator('text=/◊©◊ô◊®|◊ê◊ô◊®◊ï◊¢|◊õ◊ô◊™◊ï◊™/').first()
    await expect(hebrewText).toBeVisible({ timeout: 5000 })

    // Switch to Russian if available
    const langSwitcher = page.locator('button:has-text("RU"), a:has-text("RU"), [data-testid="lang-ru"]')
    if (await langSwitcher.isVisible({ timeout: 2000 }).catch(() => false)) {
      await langSwitcher.click()

      // Check for Russian content
      const russianText = page.locator('text=/–ü–µ—Å–Ω—è|–°–æ–±—ã—Ç–∏—è|–∫–ª–∞—Å—Å—ã/').first()
      await expect(russianText).toBeVisible({ timeout: 5000 })
    }
  })

  test('should show event dates in November 2025', async ({ page }) => {
    // Navigate to calendar or events
    const eventsLink = page.locator('a:has-text("◊ú◊ï◊ó ◊©◊†◊î"), a:has-text("◊ê◊ô◊®◊ï◊¢◊ô◊ù"), a[href*="/calendar"], a[href*="/events"]').first()

    if (await eventsLink.isVisible({ timeout: 2000 }).catch(() => false)) {
      await eventsLink.click()
      await page.waitForLoadState('networkidle')
    }

    // Look for November dates
    const novemberDates = [
      '2.11', '3.11', '5.11', '6.11', '7.11', '9.11',
      '13.11', '14.11', '16.11', '18.11', '19.11', '20.11',
      '21.11', '23.11', '26.11', '30.11'
    ]

    let foundDates = 0
    for (const date of novemberDates) {
      const dateElement = page.locator(`text=${date}`).first()
      if (await dateElement.isVisible({ timeout: 500 }).catch(() => false)) {
        foundDates++
      }
    }

    console.log(`‚úÖ Found ${foundDates} November 2025 dates`)
  })

  test('should display events with location information', async ({ page }) => {
    // Look for location names
    const locations = [
      '◊û◊®◊õ◊ñ ◊û◊ê◊ô◊î',
      '◊ë◊ô◊™ ◊°◊§◊® ◊ê◊ô◊ú◊ü ◊®◊û◊ï◊ü',
      '–¶–µ–Ω—Ç—Ä ¬´–ú–∞–π—è¬ª',
      '–®–∫–æ–ª–∞ ¬´–ò–ª–∞–Ω –†–∞–º–æ–Ω¬ª'
    ]

    let foundLocations = 0
    for (const location of locations) {
      const locationElement = page.locator(`text=${location}`).first()
      if (await locationElement.isVisible({ timeout: 1000 }).catch(() => false)) {
        foundLocations++
      }
    }

    console.log(`‚úÖ Found ${foundLocations} location references`)
  })

  test('should verify no "no events" message is shown', async ({ page }) => {
    // Check that "no events" message is NOT visible
    const noEventsMessage = page.locator('text=/◊ê◊ô◊ü ◊ê◊ô◊®◊ï◊¢◊ô◊ù|No events|–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π/')

    // Wait a bit for events to load
    await page.waitForTimeout(2000)

    // This should NOT be visible if we have events
    const isVisible = await noEventsMessage.isVisible().catch(() => false)

    if (isVisible) {
      console.log('‚ö†Ô∏è WARNING: "No events" message is still showing!')
    } else {
      console.log('‚úÖ "No events" message is correctly hidden')
    }
  })
})
